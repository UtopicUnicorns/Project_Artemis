function highLight(elmnt, mode) {
  var lang = (mode || &quot;html&quot;);
    var elmntObj = (document.getElementById(elmnt) || elmnt);
      var elmntTxt = elmntObj.innerHTML;
        elmntObj.innerHTML = &quot;&quot;;
          elmntObj.style.height = `${elmntObj.offsetHeight}px`;
            elmntObj.style.width = `${elmntObj.offsetWidth}px`;
  var tagcolor = &quot;mediumblue&quot;;
    var tagnamecolor = &quot;brown&quot;;
      var attributecolor = &quot;red&quot;;
        var attributevaluecolor = &quot;mediumblue&quot;;
          var commentcolor = &quot;green&quot;;
            var cssselectorcolor = &quot;brown&quot;;
              var csspropertycolor = &quot;red&quot;;
                var csspropertyvaluecolor = &quot;mediumblue&quot;;
                  var cssdelimitercolor = &quot;black&quot;;
                    var cssimportantcolor = &quot;red&quot;;  
                      var jscolor = &quot;black&quot;;
                        var jskeywordcolor = &quot;mediumblue&quot;;
                          var jsstringcolor = &quot;brown&quot;;
                            var jsnumbercolor = &quot;red&quot;;
                              var jspropertycolor = &quot;black&quot;;
  elmntObj.style.fontFamily = &quot;Consolas,'Courier New', monospace&quot;;
    if (!lang) {lang = &quot;html&quot;; }
      if (lang == &quot;html&quot;) {elmntTxt = htmlMode(elmntTxt);}
        if (lang == &quot;css&quot;) {elmntTxt = cssMode(elmntTxt);}
          if (lang == &quot;js&quot;) {elmntTxt = jsMode(elmntTxt);}
            elmntObj.innerHTML = elmntTxt;

  function extract(str, start, end, func, repl) {
    var s, e, d = &quot;&quot;, a = [];
      while (str.search(start) &gt; -1) {
        s = str.search(start);
          e = str.indexOf(end, s);
            if (e == -1) {e = str.length;}
              if (repl) {
                a.push(func(str.substring(s, e + (end.length))));      
                  str = str.substring(0, s) + repl + str.substr(e + (end.length));
              } else {
                d += str.substring(0, s);
                  d += func(str.substring(s, e + (end.length)));
                    str = str.substr(e + (end.length));
              }
      }
        this.rest = d + str;
          this.arr = a;
  }
  function htmlMode(txt) {
    var rest = txt, done = &quot;&quot;, php, comment, angular, startpos, endpos, note, i;
      comment = new extract(rest, &quot;&amp;lt;!--&quot;, &quot;--&amp;gt;&quot;, commentMode, &quot;W3HTMLCOMMENTPOS&quot;);
        rest = comment.rest;
          while (rest.indexOf(&quot;&amp;lt;&quot;) &gt; -1) {
            note = &quot;&quot;;
              startpos = rest.indexOf(&quot;&amp;lt;&quot;);
                if (rest.substr(startpos, 9).toUpperCase() == &quot;&amp;LT;STYLE&quot;) {note = &quot;css&quot;;}
                  if (rest.substr(startpos, 10).toUpperCase() == &quot;&amp;LT;SCRIPT&quot;) {note = &quot;javascript&quot;;}        
                    endpos = rest.indexOf(&quot;&amp;gt;&quot;, startpos);
                      if (endpos == -1) {endpos = rest.length;}
                        done += rest.substring(0, startpos);
                          done += tagMode(rest.substring(startpos, endpos + 4));
                            rest = rest.substr(endpos + 4);
                              if (note == &quot;css&quot;) {
                                endpos = rest.indexOf(&quot;&amp;lt;/style&amp;gt;&quot;);
                                  if (endpos &gt; -1) {
                                    done += cssMode(rest.substring(0, endpos));
                                      rest = rest.substr(endpos);
                                  }
                              }
                                if (note == &quot;javascript&quot;) {
                                  endpos = rest.indexOf(&quot;&amp;lt;/script&amp;gt;&quot;);
                                    if (endpos &gt; -1) {
                                      done += jsMode(rest.substring(0, endpos));
                                        rest = rest.substr(endpos);
                                    }
                                }
          }
            rest = done + rest;
              for (i = 0; i &lt; comment.arr.length; i++) {
                rest = rest.replace(&quot;W3HTMLCOMMENTPOS&quot;, comment.arr[i]);
              }
                return rest;
  }
  function tagMode(txt) {
    var rest = txt, done = &quot;&quot;, startpos, endpos, result;
      while (rest.search(/(\s|&lt;br&gt;)/) &gt; -1) {    
        startpos = rest.search(/(\s|&lt;br&gt;)/);
          endpos = rest.indexOf(&quot;&amp;gt;&quot;);
            if (endpos == -1) {endpos = rest.length;}
              done += rest.substring(0, startpos);
                done += attributeMode(rest.substring(startpos, endpos));
                  rest = rest.substr(endpos);
      }
        result = done + rest;
          result = &quot;&lt;span style=color:&quot; + tagcolor + &quot;&gt;&amp;lt;&lt;/span&gt;&quot; + result.substring(4);
            if (result.substr(result.length - 4, 4) == &quot;&amp;gt;&quot;) {
              result = result.substring(0, result.length - 4) + &quot;&lt;span style=color:&quot; + tagcolor + &quot;&gt;&amp;gt;&lt;/span&gt;&quot;;
            }
              return &quot;&lt;span style=color:&quot; + tagnamecolor + &quot;&gt;&quot; + result + &quot;&lt;/span&gt;&quot;;
  }
  function attributeMode(txt) {
    var rest = txt, done = &quot;&quot;, startpos, endpos, singlefnuttpos, doublefnuttpos, spacepos;
      while (rest.indexOf(&quot;=&quot;) &gt; -1) {
        endpos = -1;
          startpos = rest.indexOf(&quot;=&quot;);
            singlefnuttpos = rest.indexOf(&quot;'&quot;, startpos);
              doublefnuttpos = rest.indexOf('&quot;', startpos);
                spacepos = rest.indexOf(&quot; &quot;, startpos + 2);
                  if (spacepos &gt; -1 &amp;&amp; (spacepos &lt; singlefnuttpos || singlefnuttpos == -1) &amp;&amp; (spacepos &lt; doublefnuttpos || doublefnuttpos == -1)) {
                    endpos = rest.indexOf(&quot; &quot;, startpos);      
                  } else if (doublefnuttpos &gt; -1 &amp;&amp; (doublefnuttpos &lt; singlefnuttpos || singlefnuttpos == -1) &amp;&amp; (doublefnuttpos &lt; spacepos || spacepos == -1)) {
                    endpos = rest.indexOf('&quot;', rest.indexOf('&quot;', startpos) + 1);
                  } else if (singlefnuttpos &gt; -1 &amp;&amp; (singlefnuttpos &lt; doublefnuttpos || doublefnuttpos == -1) &amp;&amp; (singlefnuttpos &lt; spacepos || spacepos == -1)) {
                    endpos = rest.indexOf(&quot;'&quot;, rest.indexOf(&quot;'&quot;, startpos) + 1);
                  }
                    if (!endpos || endpos == -1 || endpos &lt; startpos) {endpos = rest.length;}
                      done += rest.substring(0, startpos);
                        done += attributeValueMode(rest.substring(startpos, endpos + 1));
                          rest = rest.substr(endpos + 1);
      }
        return &quot;&lt;span style=color:&quot; + attributecolor + &quot;&gt;&quot; + done + rest + &quot;&lt;/span&gt;&quot;;
  }
  function attributeValueMode(txt) {
    return &quot;&lt;span style=color:&quot; + attributevaluecolor + &quot;&gt;&quot; + txt + &quot;&lt;/span&gt;&quot;;
  }
  function commentMode(txt) {
    return &quot;&lt;span style=color:&quot; + commentcolor + &quot;&gt;&quot; + txt + &quot;&lt;/span&gt;&quot;;
  }
  function cssMode(txt) {
    var rest = txt, done = &quot;&quot;, s, e, comment, i, midz, c, cc;
    comment = new extract(rest, /\/\*/, &quot;*/&quot;, commentMode, &quot;W3CSSCOMMENTPOS&quot;);
    rest = comment.rest;
    while (rest.search(&quot;{&quot;) &gt; -1) {
      s = rest.search(&quot;{&quot;);
      midz = rest.substr(s + 1);
      cc = 1;
      c = 0;
      for (i = 0; i &lt; midz.length; i++) {
        if (midz.substr(i, 1) == &quot;{&quot;) {cc++; c++}
        if (midz.substr(i, 1) == &quot;}&quot;) {cc--;}
        if (cc == 0) {break;}
      }
      if (cc != 0) {c = 0;}
      e = s;
      for (i = 0; i &lt;= c; i++) {
        e = rest.indexOf(&quot;}&quot;, e + 1);
      }
      if (e == -1) {e = rest.length;}
      done += rest.substring(0, s + 1);
      done += cssPropertyMode(rest.substring(s + 1, e));
      rest = rest.substr(e);
    }
    rest = done + rest;
    rest = rest.replace(/{/g, &quot;&lt;span style=color:&quot; + cssdelimitercolor + &quot;&gt;{&lt;/span&gt;&quot;);
    rest = rest.replace(/}/g, &quot;&lt;span style=color:&quot; + cssdelimitercolor + &quot;&gt;}&lt;/span&gt;&quot;);
    for (i = 0; i &lt; comment.arr.length; i++) {
        rest = rest.replace(&quot;W3CSSCOMMENTPOS&quot;, comment.arr[i]);
    }
    return &quot;&lt;span style=color:&quot; + cssselectorcolor + &quot;&gt;&quot; + rest + &quot;&lt;/span&gt;&quot;;
  }
  function cssPropertyMode(txt) {
    var rest = txt, done = &quot;&quot;, s, e, n, loop;
    if (rest.indexOf(&quot;{&quot;) &gt; -1 ) { return cssMode(rest); }
    while (rest.search(&quot;:&quot;) &gt; -1) {
      s = rest.search(&quot;:&quot;);
      loop = true;
      n = s;
      while (loop == true) {
        loop = false;
        e = rest.indexOf(&quot;;&quot;, n);
        if (rest.substring(e - 5, e + 1) == &quot;&amp;nbsp;&quot;) {
          loop = true;
          n = e + 1;
        }
      }
      if (e == -1) {e = rest.length;}
      done += rest.substring(0, s);
      done += cssPropertyValueMode(rest.substring(s, e + 1));
      rest = rest.substr(e + 1);
    }
    return &quot;&lt;span style=color:&quot; + csspropertycolor + &quot;&gt;&quot; + done + rest + &quot;&lt;/span&gt;&quot;;
  }
  function cssPropertyValueMode(txt) {
    var rest = txt, done = &quot;&quot;, s;
    rest = &quot;&lt;span style=color:&quot; + cssdelimitercolor + &quot;&gt;:&lt;/span&gt;&quot; + rest.substring(1);
    while (rest.search(/!important/i) &gt; -1) {
      s = rest.search(/!important/i);
      done += rest.substring(0, s);
      done += cssImportantMode(rest.substring(s, s + 10));
      rest = rest.substr(s + 10);
    }
    result = done + rest;    
    if (result.substr(result.length - 1, 1) == &quot;;&quot; &amp;&amp; result.substr(result.length - 6, 6) != &quot;&amp;nbsp;&quot; &amp;&amp; result.substr(result.length - 4, 4) != &quot;&amp;lt;&quot; &amp;&amp; result.substr(result.length - 4, 4) != &quot;&amp;gt;&quot; &amp;&amp; result.substr(result.length - 5, 5) != &quot;&amp;amp;&quot;) {
      result = result.substring(0, result.length - 1) + &quot;&lt;span style=color:&quot; + cssdelimitercolor + &quot;&gt;;&lt;/span&gt;&quot;;
    }
    return &quot;&lt;span style=color:&quot; + csspropertyvaluecolor + &quot;&gt;&quot; + result + &quot;&lt;/span&gt;&quot;;
  }
  function cssImportantMode(txt) {
    return &quot;&lt;span style=color:&quot; + cssimportantcolor + &quot;;font-weight:bold;&gt;&quot; + txt + &quot;&lt;/span&gt;&quot;;
  }
  function jsMode(txt) {
    var rest = txt, done = &quot;&quot;, esc = [], i, cc, tt = &quot;&quot;, sfnuttpos, dfnuttpos, compos, comlinepos, keywordpos, numpos, mypos, dotpos, y;
    for (i = 0; i &lt; rest.length; i++)  {
      cc = rest.substr(i, 1);
      if (cc == &quot;\\&quot;) {
        esc.push(rest.substr(i, 2));
        cc = &quot;W3JSESCAPE&quot;;
        i++;
      }
      tt += cc;
    }
    rest = tt;
    y = 1;
    while (y == 1) {
      sfnuttpos = getPos(rest, &quot;'&quot;, &quot;'&quot;, jsStringMode);
      dfnuttpos = getPos(rest, '&quot;', '&quot;', jsStringMode);
      compos = getPos(rest, /\/\*/, &quot;*/&quot;, commentMode);
      comlinepos = getPos(rest, /\/\//, &quot;&lt;br&gt;&quot;, commentMode);      
      numpos = getNumPos(rest, jsNumberMode);
      keywordpos = getKeywordPos(&quot;js&quot;, rest, jsKeywordMode);
      dotpos = getDotPos(rest, jsPropertyMode);
      if (Math.max(numpos[0], sfnuttpos[0], dfnuttpos[0], compos[0], comlinepos[0], keywordpos[0], dotpos[0]) == -1) {break;}
      mypos = getMinPos(numpos, sfnuttpos, dfnuttpos, compos, comlinepos, keywordpos, dotpos);
      if (mypos[0] == -1) {break;}
      if (mypos[0] &gt; -1) {
        done += rest.substring(0, mypos[0]);
        done += mypos[2](rest.substring(mypos[0], mypos[1]));
        rest = rest.substr(mypos[1]);
      }
    }
    rest = done + rest;
    for (i = 0; i &lt; esc.length; i++) {
      rest = rest.replace(&quot;W3JSESCAPE&quot;, esc[i]);
    }
    return &quot;&lt;span style=color:&quot; + jscolor + &quot;&gt;&quot; + rest + &quot;&lt;/span&gt;&quot;;
  }
  function jsStringMode(txt) {
    return &quot;&lt;span style=color:&quot; + jsstringcolor + &quot;&gt;&quot; + txt + &quot;&lt;/span&gt;&quot;;
  }
  function jsKeywordMode(txt) {
    return &quot;&lt;span style=color:&quot; + jskeywordcolor + &quot;&gt;&quot; + txt + &quot;&lt;/span&gt;&quot;;
  }
  function jsNumberMode(txt) {
    return &quot;&lt;span style=color:&quot; + jsnumbercolor + &quot;&gt;&quot; + txt + &quot;&lt;/span&gt;&quot;;
  }
  function jsPropertyMode(txt) {
    return &quot;&lt;span style=color:&quot; + jspropertycolor + &quot;&gt;&quot; + txt + &quot;&lt;/span&gt;&quot;;
  }
  function getDotPos(txt, func) {
    var x, i, j, s, e, arr = [&quot;.&quot;,&quot;&lt;&quot;, &quot; &quot;, &quot;;&quot;, &quot;(&quot;, &quot;+&quot;, &quot;)&quot;, &quot;[&quot;, &quot;]&quot;, &quot;,&quot;, &quot;&amp;&quot;, &quot;:&quot;, &quot;{&quot;, &quot;}&quot;, &quot;/&quot; ,&quot;-&quot;, &quot;*&quot;, &quot;|&quot;, &quot;%&quot;];
    s = txt.indexOf(&quot;.&quot;);
    if (s &gt; -1) {
      x = txt.substr(s + 1);
      for (j = 0; j &lt; x.length; j++) {
        cc = x[j];
        for (i = 0; i &lt; arr.length; i++) {
          if (cc.indexOf(arr[i]) &gt; -1) {
            e = j;
            return [s + 1, e + s + 1, func];
          }
        }
      }
    }
    return [-1, -1, func];
  }
  function getMinPos() {
    var i, arr = [];
    for (i = 0; i &lt; arguments.length; i++) {
      if (arguments[i][0] &gt; -1) {
        if (arr.length == 0 || arguments[i][0] &lt; arr[0]) {arr = arguments[i];}
      }
    }
    if (arr.length == 0) {arr = arguments[i];}
    return arr;
  }
  function getKeywordPos(typ, txt, func) {
    var words, i, pos, rpos = -1, rpos2 = -1, patt;
    if (typ == &quot;js&quot;) {
      words = [&quot;abstract&quot;,&quot;arguments&quot;,&quot;boolean&quot;,&quot;break&quot;,&quot;byte&quot;,&quot;case&quot;,&quot;catch&quot;,&quot;char&quot;,&quot;class&quot;,&quot;const&quot;,&quot;continue&quot;,&quot;debugger&quot;,&quot;default&quot;,&quot;delete&quot;,
      &quot;do&quot;,&quot;double&quot;,&quot;else&quot;,&quot;enum&quot;,&quot;eval&quot;,&quot;export&quot;,&quot;extends&quot;,&quot;false&quot;,&quot;final&quot;,&quot;finally&quot;,&quot;float&quot;,&quot;for&quot;,&quot;function&quot;,&quot;goto&quot;,&quot;if&quot;,&quot;implements&quot;,&quot;import&quot;,
      &quot;in&quot;,&quot;instanceof&quot;,&quot;int&quot;,&quot;interface&quot;,&quot;let&quot;,&quot;long&quot;,&quot;NaN&quot;,&quot;native&quot;,&quot;new&quot;,&quot;null&quot;,&quot;package&quot;,&quot;private&quot;,&quot;protected&quot;,&quot;public&quot;,&quot;return&quot;,&quot;short&quot;,&quot;static&quot;,
      &quot;super&quot;,&quot;switch&quot;,&quot;synchronized&quot;,&quot;this&quot;,&quot;throw&quot;,&quot;throws&quot;,&quot;transient&quot;,&quot;true&quot;,&quot;try&quot;,&quot;typeof&quot;,&quot;var&quot;,&quot;void&quot;,&quot;volatile&quot;,&quot;while&quot;,&quot;with&quot;,&quot;yield&quot;];
    }
    for (i = 0; i &lt; words.length; i++) {
      pos = txt.indexOf(words[i]);
      if (pos &gt; -1) {
        patt = /\W/g;
        if (txt.substr(pos + words[i].length,1).match(patt) &amp;&amp; txt.substr(pos - 1,1).match(patt)) {
          if (pos &gt; -1 &amp;&amp; (rpos == -1 || pos &lt; rpos)) {
            rpos = pos;
            rpos2 = rpos + words[i].length;
          }
        }
      } 
    }
    return [rpos, rpos2, func];
  }
  function getPos(txt, start, end, func) {
    var s, e;
    s = txt.search(start);
    e = txt.indexOf(end, s + (end.length));
    if (e == -1) {e = txt.length;}
    return [s, e + (end.length), func];
  }
  function getNumPos(txt, func) {
    var arr = [&quot;&lt;br&gt;&quot;, &quot; &quot;, &quot;;&quot;, &quot;(&quot;, &quot;+&quot;, &quot;)&quot;, &quot;[&quot;, &quot;]&quot;, &quot;,&quot;, &quot;&amp;&quot;, &quot;:&quot;, &quot;{&quot;, &quot;}&quot;, &quot;/&quot; ,&quot;-&quot;, &quot;*&quot;, &quot;|&quot;, &quot;%&quot;, &quot;=&quot;], i, j, c, startpos = 0, endpos, word;
    for (i = 0; i &lt; txt.length; i++) {
      for (j = 0; j &lt; arr.length; j++) {
        c = txt.substr(i, arr[j].length);
        if (c == arr[j]) {
          if (c == &quot;-&quot; &amp;&amp; (txt.substr(i - 1, 1) == &quot;e&quot; || txt.substr(i - 1, 1) == &quot;E&quot;)) {
            continue;
          }
          endpos = i;
          if (startpos &lt; endpos) {
            word = txt.substring(startpos, endpos);
            if (!isNaN(word)) {return [startpos, endpos, func];}
          }
          i += arr[j].length;
          startpos = i;
          i -= 1;
          break;
        }
      }
    }  
    return [-1, -1, func];
  }  
}
